#+TITLE: Desktop Environment

#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh   :tangle-mode (identity #o555)
#+PROPERTY: header-args:conf :tangle-mode (identity #o555)

This file contains configuration for my overall desktop environment.  My workflow is driven by Emacs but there are still a number of applications, tools, themes, and fonts that I must install to have a complete desktop experience.

* Todo
* System settings
Load system-specific settings from =.emacs.d/per-system-settings.el= and unpack relevant values into blocks so that they can be used in configuration file blocks.  These settings are configured in [[file:systems.org::*Per-System Settings][systems.org]].

#+NAME: system-settings
#+begin_src emacs-lisp :session system-settings
(load-file ".emacs.d/per-system-settings.el")
#+end_src


#+NAME: get-settings
#+begin_src emacs-lisp :var name="nil" :session system-settings
(dw/system-settings-get (intern name))
#+end_src
* Fonts and Themes

I use [[https://github.com/derat/xsettingsd][xsettingsd]] as a minimal settings daemon for Xorg applications.  It replaces similar daemons from desktop environments like GNOME and XFCE and enables me to use a simple configuration file like the following:

*.config/xsettingsd/xsettingsd.conf:*

#+begin_src conf :tangle .config/xsettingsd/xsettingsd.conf :noweb yes

Net/ThemeName "Matcha-dark-azul"
Net/IconThemeName "Papirus-Dark"
Gtk/DecorationLayout "menu:minimize,maximize,close"
Gtk/FontName "Cantarell 11"
Gtk/MonospaceFontName "Fira Mono 10"
Gtk/CursorThemeName "Adwaita"
Xft/Antialias 1
Xft/Hinting 0
Xft/HintStyle "hintnone"
Xft/DPI <<dpi()>> # 1024 * DPI

#+end_src

I also have to do an extra step to make sure Emacs can find the font path from the "desktop" profile.

*.config/fontconfig/fonts.conf:*

#+begin_src xml :tangle .config/fontconfig/fonts.conf

<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <dir>~/rde/fonts</dir>
  <dir>~/.guix-extra-profiles/desktop/desktop/share/fonts</dir>
  <alias>
    <family>Apple Color Emoji</family>
    <prefer>
      <family>Noto Color Emoji</family>
    </prefer>
  </alias>
</fontconfig>

#+end_src

*DPI*

#+NAME: dpi
#+begin_src emacs-lisp :session=system-settings :var settings=system-settings
(* 1024 (alist-get 'desktop/dpi dw/system-settings))
#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

;; Settings Manager
"xsettingsd"

;; GTK Themes
"arc-icon-theme"
"matcha-theme"
"hicolor-icon-theme"
"gnome-icon-theme"
"gnome-backgrounds"
"papirus-icon-theme"
"breeze-icons"

;; Fonts
"font-fira-code"
"font-jetbrains-mono"
"font-iosevka"
"font-iosevka-aile"
"font-abattis-cantarell"
"font-dejavu"
"font-google-noto"
"font-gnu-freefont"
"font-liberation"
"font-awesome"
"font-google-material-design-icons"
"gs-fonts"

#+end_src

* Desktop Profile

The =desktop.scm= manifest holds the list of packages that I use to configure my desktop environment.  The package names are pulled from the relevant sections titled *Guix Packages* in this file (=Desktop.org=).

*.config/guix/manifests/desktop.scm:*

#+begin_src scheme :tangle .config/guix/manifests/desktop.scm :noweb yes

(specifications->manifest
 '(
   <<packages>>
))

#+end_src

* Window Management

I use Emacs as the desktop window manager thanks to the excellent EXWM.  This configuration gets loaded relatively early in Emacs startup if running on a Linux machine.

#+begin_src emacs-lisp :tangle .emacs.d/lisp/dw-desktop.el

(use-package exwm
  :init
  (setq mouse-autoselect-window nil
        focus-follows-mouse t
        exwm-workspace-warp-cursor t
        exwm-workspace-number 5)
        ;exwm-workspace-display-echo-area-timeout 5
        ;exwm-workspace-minibuffer-position 'bottom) ;; Annoying focus issues
  :config
  ;; Make class name the buffer name
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (exwm-workspace-rename-buffer exwm-class-name)))
  (add-hook 'exwm-update-title-hook
            (lambda ()
              (pcase exwm-class-name
                ("Vimb" (exwm-workspace-rename-buffer (format "vimb: %s" exwm-title)))
                ("qutebrowser" (exwm-workspace-rename-buffer (format "Qutebrowser: %s" exwm-title))))))

  (exwm-enable))

;; Enable exwm-randr before exwm-init gets called
(use-package exwm-randr
  :if dw/exwm-enabled
  :after (exwm)
  :config
  (exwm-randr-enable)
  (setq exwm-randr-workspace-monitor-plist '(4 "DP-2")))

#+end_src

** Helper Functions

#+begin_src emacs-lisp :tangle .emacs.d/lisp/dw-desktop.el

  (defun exwm/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun exwm/bind-function (key invocation &rest bindings)
    "Bind KEYs to FUNCTIONs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             (funcall ',invocation)))
      (setq key (pop bindings)
            invocation (pop bindings))))

  (defun exwm/bind-command (key command &rest bindings)
    "Bind KEYs to COMMANDs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             (exwm/run-in-background ,command)))
      (setq key (pop bindings)
            command (pop bindings))))

#+end_src

** Configuration

#+begin_src emacs-lisp :tangle .emacs.d/lisp/dw-desktop.el

  (defun dw/exwm-init-hook ()
    (with-eval-after-load 'perspective
      ;; Set up perspective names on initial workspaces
      (exwm-workspace-switch-create 0)
      (persp-switch "Chat")

      (persp-kill "Main")
      (exwm-workspace-switch-create 1)
      (exwm-workspace-switch-create 2)
      (persp-switch "Browsers")
      (persp-kill "Main")
      (exwm-workspace-switch-create 3)
      (persp-switch "Comms")
      (persp-kill "Main")
      (exwm-workspace-switch-create 4)
      (persp-switch "Media")
      (persp-kill "Main")

      ;; Make workspace 1 be the one where we land at startup
      (exwm-workspace-switch-create 1)

      ;; Open eshell by default
      (eshell))

    ;; Launch apps that will run in the background
    (exwm/run-in-background "dunst")
    (exwm/run-in-background "nm-applet")
    (exwm/run-in-background "udiskie -t")
    (exwm/run-in-background "redshift -l 47.675510:-122.203362 -t 6500:3500"))

  (use-package exwm
    :if dw/exwm-enabled
    :config

    (add-hook 'exwm-mode-hook
              (lambda ()
                (evil-local-set-key 'motion (kbd "C-u") nil)))

    (defun dw/setup-window-by-class ()
      (interactive)
      (pcase exwm-class-name
        ("Vimb" (exwm-workspace-move-window 2))
        ("qutebrowser" (exwm-workspace-move-window 2))))

    ;; Do some post-init setup
    (add-hook 'exwm-init-hook #'dw/exwm-init-hook)

    ;; Manipulate windows as they're created
    (add-hook 'exwm-manage-finish-hook
              (lambda ()
                ;; Send the window where it belongs
                (dw/setup-window-by-class)))

                ;; Hide the modeline on all X windows
                ;(exwm-layout-hide-mode-line)))

    ;; Hide the modeline on all X windows
    (add-hook 'exwm-floating-setup-hook
              (lambda ()
                (exwm-layout-hide-mode-line))))

  (use-package exwm-systemtray
    :disabled
    :if dw/exwm-enabled
    :after (exwm)
    :config
    (exwm-systemtray-enable)
    (setq exwm-systemtray-height 35))

#+end_src

** Keybindings

#+begin_src emacs-lisp :tangle .emacs.d/lisp/dw-desktop.el

  (when dw/exwm-enabled
    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
      '(?\C-x
        ?\C-h
        ?\M-x
        ?\M-`
        ?\M-&
        ?\M-:
        ?\C-\M-j  ;; Buffer list
        ?\C-\M-k  ;; Browser list
        ?\C-\M-n  ;; Next workspace
        ?\C-\     ;; Ctrl+Space
        ?\C-\;))

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    (defun exwm/run-vimb ()
      (exwm/run-in-background "vimb")
      (exwm-workspace-switch-create 2))

    (defun exwm/run-qute ()
      (exwm/run-in-background "qutebrowser")
      (exwm-workspace-switch-create 2))

    (exwm/bind-function
      "s-o" 'exwm/run-qute
      "s-q" 'kill-buffer)

    (exwm/bind-command
      "s-p" "playerctl play-pause"
      "s-[" "playerctl previous"
      "s-]" "playerctl next")

    (use-package desktop-environment
      :after exwm
      :config (desktop-environment-mode)
      :custom
      (desktop-environment-brightness-small-increment "2%+")
      (desktop-environment-brightness-small-decrement "2%-")
      (desktop-environment-brightness-normal-increment "5%+")
      (desktop-environment-brightness-normal-decrement "5%-")
      (desktop-environment-screenshot-command "flameshot gui"))

    ;; This needs a more elegant ASCII banner
    (defhydra hydra-exwm-move-resize (:timeout 4)
      "Move/Resize Window (Shift is bigger steps, Ctrl moves window)"
      ("j" (lambda () (interactive) (exwm-layout-enlarge-window 10)) "V 10")
      ("J" (lambda () (interactive) (exwm-layout-enlarge-window 30)) "V 30")
      ("k" (lambda () (interactive) (exwm-layout-shrink-window 10)) "^ 10")
      ("K" (lambda () (interactive) (exwm-layout-shrink-window 30)) "^ 30")
      ("h" (lambda () (interactive) (exwm-layout-shrink-window-horizontally 10)) "< 10")
      ("H" (lambda () (interactive) (exwm-layout-shrink-window-horizontally 30)) "< 30")
      ("l" (lambda () (interactive) (exwm-layout-enlarge-window-horizontally 10)) "> 10")
      ("L" (lambda () (interactive) (exwm-layout-enlarge-window-horizontally 30)) "> 30")
      ("C-j" (lambda () (interactive) (exwm-floating-move 0 10)) "V 10")
      ("C-S-j" (lambda () (interactive) (exwm-floating-move 0 30)) "V 30")
      ("C-k" (lambda () (interactive) (exwm-floating-move 0 -10)) "^ 10")
      ("C-S-k" (lambda () (interactive) (exwm-floating-move 0 -30)) "^ 30")
      ("C-h" (lambda () (interactive) (exwm-floating-move -10 0)) "< 10")
      ("C-S-h" (lambda () (interactive) (exwm-floating-move -30 0)) "< 30")
      ("C-l" (lambda () (interactive) (exwm-floating-move 10 0)) "> 10")
      ("C-S-l" (lambda () (interactive) (exwm-floating-move 30 0)) "> 30")
      ("f" nil "finished" :exit t))

    ;; Workspace switching
    (setq exwm-input-global-keys
           `(([?\s-\C-r] . exwm-reset)
             ([?\s-w] . exwm-workspace-switch)
             ([?\s-r] . hydra-exwm-move-resize/body)
             ([?\s-e] . dired-jump)
             ([?\s-E] . (lambda () (interactive) (dired "~")))
             ([?\s-Q] . (lambda () (interactive) (kill-buffer)))
             ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))
             ,@(mapcar (lambda (i)
                         `(,(kbd (format "s-%d" i)) .
                            (lambda ()
                             (interactive)
                             (exwm-workspace-switch-create ,i))))
                        (number-sequence 0 9))))

    (exwm-input-set-key (kbd "<s-return>") 'vterm)
    (exwm-input-set-key (kbd "s-SPC") 'app-launcher-run-app)
    (exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen))

#+end_src

** Useful Links

- https://github.com/ch11ng/exwm/wiki
- https://www.reddit.com/r/emacs/comments/6huok9/exwm_configs/
- https://ambrevar.xyz/de/index.html

* Applications

** Browsers

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"vimb"
"qutebrowser"

#+end_src

** Audio Device Control

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"alsa-utils"
"pavucontrol"

#+end_src

** Image Viewers and Editors

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"feh"
"gimp"
"scrot"

#+end_src

** Document Readers

#+begin_src conf :tangle .config/zathura/zathurarc

# Automatically adjust the document to full width
set adjust-open width

# Set the title to the filename
set window-title-basename true

# Larger scroll steps with j/k
set scroll-step 150

# Adjusting the document
map [normal] E adjust_window best-fit
map [fullscreen] E adjust_window best-fit
map [normal] e adjust_window width
map [fullscreen] e adjust_window width

# Toggling the inverted colours
map <C-i> recolor
map <C-g> abort

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"zathura"
"zathura-pdf-mupdf"

#+end_src

** Flatpak

I use Flatpak and the [[https://flathub.org/home][Flathub]] repository to install applications that are otherwise difficult to install in Guix because of application frameworks, etc.

*Applications to Install*

#+begin_src sh

flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak remote-add --user --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo
flatpak install --user flathub com.valvesoftware.Steam
flatpak install --user flathub-beta com.obsproject.Studio

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"flatpak"

#+end_src

** Desktop Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"compton"
"redshift"
"gucharmap"
"fontmanager"
"brightnessctl"
"xdg-utils"      ;; For xdg-open, etc
"xdg-dbus-proxy" ;; For Flatpak
"gtk+:bin"       ;; For gtk-launch
"glib:bin"       ;; For gio-launch-desktop
"shared-mime-info"

#+end_src

** System Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"openssh"
"zip"
"unzip"

#+end_src

** Xorg Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"xev"
"xset"
"xrdb"
"xhost"
"xmodmap"
"setxkbmap"
"xrandr"
"arandr"
"xss-lock"
"libinput"
"xinput"

#+end_src


* Provide the dw-desktop package

#+begin_src emacs-lisp :tangle .emacs.d/lisp/dw-desktop.el

  (provide 'dw-desktop)

#+end_src
