#+TITLE: Desktop Environment

#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh   :tangle-mode (identity #o555)
#+PROPERTY: header-args:conf :tangle-mode (identity #o555)

This file contains configuration for my overall desktop environment.  My workflow is driven by Emacs but there are still a number of applications, tools, themes, and fonts that I must install to have a complete desktop experience.

* Todo
* System settings
Load system-specific settings from =.emacs.d/per-system-settings.el= and unpack relevant values into blocks so that they can be used in configuration file blocks.  These settings are configured in [[file:systems.org::*Per-System Settings][systems.org]].

#+NAME: system-settings
#+begin_src emacs-lisp :session system-settings
(load-file ".emacs.d/per-system-settings.el")
#+end_src


#+NAME: get-setting
#+begin_src emacs-lisp :var name="nil" :session system-settings
(dw/system-settings-get (intern name))
#+end_src
* Fonts and Themes

I use [[https://github.com/derat/xsettingsd][xsettingsd]] as a minimal settings daemon for Xorg applications.  It replaces similar daemons from desktop environments like GNOME and XFCE and enables me to use a simple configuration file like the following:

*.config/xsettingsd/xsettingsd.conf:*

#+begin_src conf :tangle .config/xsettingsd/xsettingsd.conf :noweb yes

Net/ThemeName "Matcha-dark-azul"
Net/IconThemeName "Papirus-Dark"
Gtk/DecorationLayout "menu:minimize,maximize,close"
Gtk/FontName "Cantarell 11"
Gtk/MonospaceFontName "Fira Mono 10"
Gtk/CursorThemeName "Adwaita"
Xft/Antialias 1
Xft/Hinting 0
Xft/HintStyle "hintnone"
Xft/DPI <<dpi()>> # 1024 * DPI

#+end_src

I also have to do an extra step to make sure Emacs can find the font path from the "desktop" profile.

*.config/fontconfig/fonts.conf:*

#+begin_src xml :tangle .config/fontconfig/fonts.conf

<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <dir>~/rde/fonts</dir>
  <dir>~/.guix-extra-profiles/desktop/desktop/share/fonts</dir>
  <alias>
    <family>Apple Color Emoji</family>
    <prefer>
      <family>Noto Color Emoji</family>
    </prefer>
  </alias>
</fontconfig>

#+end_src

*DPI*

#+NAME: dpi
#+begin_src emacs-lisp :session=system-settings :var settings=system-settings
(* 1024 (alist-get 'desktop/dpi dw/system-settings))
#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

;; Settings Manager
"xsettingsd"

;; GTK Themes
"arc-icon-theme"
"matcha-theme"
"hicolor-icon-theme"
"gnome-icon-theme"
"gnome-backgrounds"
"papirus-icon-theme"
"breeze-icons"

;; Fonts
"font-fira-code"
"font-jetbrains-mono"
"font-iosevka"
"font-iosevka-aile"
"font-abattis-cantarell"
"font-dejavu"
"font-google-noto"
"font-gnu-freefont"
"font-liberation"
"font-awesome"
"font-google-material-design-icons"
"gs-fonts"

"gtk+:bin"
"make"

#+end_src
* Window Management

I use Emacs as the desktop window manager thanks to the excellent EXWM.  This configuration gets loaded relatively early in Emacs startup if running on a Linux machine.

#+begin_src emacs-lisp :tangle .emacs.d/lisp/dw-desktop.el

(use-package exwm
  :init
  (setq mouse-autoselect-window nil
        focus-follows-mouse t
        exwm-workspace-warp-cursor t
        exwm-workspace-number 5)
        ;exwm-workspace-display-echo-area-timeout 5
        ;exwm-workspace-minibuffer-position 'bottom) ;; Annoying focus issues
  :config
  ;; Make class name the buffer name
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (exwm-workspace-rename-buffer exwm-class-name)))
  (add-hook 'exwm-update-title-hook
            (lambda ()
              (pcase exwm-class-name
                ("Vimb" (exwm-workspace-rename-buffer (format "vimb: %s" exwm-title)))
                ("qutebrowser" (exwm-workspace-rename-buffer (format "Qutebrowser: %s" exwm-title))))))

  (exwm-enable))

;; Enable exwm-randr before exwm-init gets called
(use-package exwm-randr
  :if dw/exwm-enabled
  :after (exwm)
  :config
  (exwm-randr-enable)
  (setq exwm-randr-workspace-monitor-plist '(4 "eDP-1")))

#+end_src

** Helper Functions

#+begin_src emacs-lisp :tangle .emacs.d/lisp/dw-desktop.el

  (defun exwm/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun exwm/bind-function (key invocation &rest bindings)
    "Bind KEYs to FUNCTIONs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             (funcall ',invocation)))
      (setq key (pop bindings)
            invocation (pop bindings))))

  (defun exwm/bind-command (key command &rest bindings)
    "Bind KEYs to COMMANDs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             (exwm/run-in-background ,command)))
      (setq key (pop bindings)
            command (pop bindings))))

#+end_src

** Configuration

#+begin_src emacs-lisp :tangle .emacs.d/lisp/dw-desktop.el

  (defun dw/exwm-init-hook ()
    (with-eval-after-load 'perspective
      ;; Set up perspective names on initial workspaces
      (exwm-workspace-switch-create 0)
      (persp-switch "Chat")

      ;; Launch Telega in workspace 0 if we've logged in before
      ;;(when (file-exists-p "~/.telega/db.sqlite")
      ;;  (telega nil))

      (persp-kill "Main")
      (exwm-workspace-switch-create 1)
      (exwm-workspace-switch-create 2)
      (persp-switch "Browsers")
      (persp-kill "Main")
      (exwm-workspace-switch-create 3)
      (persp-switch "Comms")
      (persp-kill "Main")
      (exwm-workspace-switch-create 4)
      (persp-switch "Media")
      (persp-kill "Main")

      ;; Make workspace 1 be the one where we land at startup
      (exwm-workspace-switch-create 1)

      ;; Open eshell by default
      (eshell))

    ;; Launch apps that will run in the background
  ;;   (exwm/run-in-background "dunst")
  ;;   (exwm/run-in-background "nm-applet")
  ;;   (exwm/run-in-background "syncthing-gtk --minimized")
  ;;   (exwm/run-in-background "udiskie -t")
  ;;   (exwm/run-in-background "redshift -l 47.675510:-122.203362 -t 6500:3500"))

  ;; (use-pack
   age exwm
    :if dw/exwm-enabled
    :config

    (add-hook 'exwm-mode-hook
	      (lambda ()
		(evil-local-set-key 'motion (kbd "C-u") nil)))

    (defun dw/setup-window-by-class ()
      (interactive)
      (pcase exwm-class-name
	("Pidgin" (exwm-workspace-move-window 0))
	("Pidgin<2>" (exwm-workspace-move-window 0))
	("discord" (exwm-workspace-move-window 3))
	("Microsoft Teams - Preview" (exwm-workspace-move-window 3))
	("Spotify" (exwm-workspace-move-window 4))
	("Vimb" (exwm-workspace-move-window 2))
	("qutebrowser" (exwm-workspace-move-window 2))
	("qjackctl" (exwm-floating-toggle-floating))
	("mpv" (exwm-floating-toggle-floating)
	       (dw/exwm-floating-toggle-pinned))
	("gsi" (exwm-input-toggle-keyboard))))

    ;; Do some post-init setup
    (add-hook 'exwm-init-hook #'dw/exwm-init-hook)

    ;; Manipulate windows as they're created
    (add-hook 'exwm-manage-finish-hook
	      (lambda ()
		;; Send the window where it belongs
		(dw/setup-window-by-class)))

		;; Hide the modeline on all X windows
		;(exwm-layout-hide-mode-line)))

    ;; Hide the modeline on all X windows
    (add-hook 'exwm-floating-setup-hook
	      (lambda ()
		(exwm-layout-hide-mode-line))))

  (use-package exwm-systemtray
    :disabled
    :if dw/exwm-enabled
    :after (exwm)
    :config
    (exwm-systemtray-enable)
    (setq exwm-systemtray-height 35))

#+end_src

** Desktop Configuration

#+begin_src emacs-lisp :tangle .emacs.d/lisp/dw-desktop.el

(defun dw/run-xmodmap ()
  (interactive)
  (start-process-shell-command "xmodmap" nil "xmodmap ~/.dotfiles/.config/i3/Xmodmap"))

(defun dw/update-wallpapers ()
  (interactive)
  (start-process-shell-command
   "feh" nil
   (format "feh --bg-scale ~/.dotfiles/backgrounds/%s" (alist-get 'desktop/background dw/system-settings))))

(setq dw/panel-process nil)
(defun dw/kill-panel ()
  (interactive)
  (when dw/panel-process
    (ignore-errors
      (kill-process dw/panel-process)))
  (setq dw/panel-process nil))

(defun dw/start-panel ()
  (interactive)
  (dw/kill-panel)
  (setq dw/panel-process (start-process-shell-command "polybar" nil "polybar panel")))

(defun dw/update-screen-layout ()
  (interactive)
  (let ((layout-script "~/.bin/update-screens"))
     (message "Running screen layout script: %s" layout-script)
     (start-process-shell-command "xrandr" nil layout-script)))

(defun dw/configure-desktop ()
  (interactive)
    (dw/run-xmodmap)
    (dw/update-screen-layout)
    (run-at-time "2 sec" nil (lambda () (dw/update-wallpapers))))

(defun dw/on-exwm-init ()
  (dw/configure-desktop)
  (dw/start-panel))

(when dw/exwm-enabled
  ;; Configure the desktop for first load
  (add-hook 'exwm-init-hook #'dw/on-exwm-init))

#+end_src

** Panel

#+begin_src emacs-lisp :tangle .emacs.d/lisp/dw-desktop.el

(defun dw/send-polybar-hook (name number)
  (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" name number)))

(defun dw/update-polybar-exwm (&optional path)
  (dw/send-polybar-hook "exwm" 1)
  (dw/send-polybar-hook "exwm-path" 1))

(defun dw/update-polybar-telegram ()
  (dw/send-polybar-hook "telegram" 1))

(defun dw/polybar-exwm-workspace ()
  (pcase exwm-workspace-current-index
    (0 "")
    (1 "")
    (2 "")
    (3 "")
    (4 "")))

(defun dw/polybar-exwm-workspace-path ()
  (let ((workspace-path (frame-parameter nil 'bufler-workspace-path-formatted)))
    (if workspace-path
        (substring-no-properties workspace-path)
      "")))

(defun dw/polybar-mail-count (max-count)
  (if (and dw/mail-enabled dw/mu4e-inbox-query)
    (let* ((mail-count (shell-command-to-string
                         (format "mu find --nocolor -n %s \"%s\" | wc -l" max-count dw/mu4e-inbox-query))))
      (format " %s" (string-trim mail-count)))
    ""))

(defun dw/telega-normalize-name (chat-name)
  (let* ((trimmed-name (string-trim-left (string-trim-right chat-name "}") "◀{"))
         (first-name (nth 0 (split-string trimmed-name " "))))
    first-name))

(defun dw/propertized-to-polybar (buffer-name)
  (if-let* ((text (substring-no-properties buffer-name))
            (fg-face (get-text-property 0 'face buffer-name))
            (fg-color (face-attribute fg-face :foreground)))
    (format "%%{F%s}%s%%{F-}" fg-color (dw/telega-normalize-name text))
    text))

(defun dw/polybar-telegram-chats ()
  (if (> (length tracking-buffers) 0)
    (format " %s" (string-join (mapcar 'dw/propertized-to-polybar tracking-buffers) ", "))
    ""))

(add-hook 'exwm-workspace-switch-hook #'dw/update-polybar-exwm)
(add-hook 'bufler-workspace-set-hook #'dw/update-polybar-exwm)

#+end_src

** Keybindings

#+begin_src emacs-lisp :tangle .emacs.d/lisp/dw-desktop.el

  (when dw/exwm-enabled
    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
      '(?\C-x
        ?\C-h
        ?\M-x
        ?\M-`
        ?\M-&
        ?\M-:
        ?\C-\M-j  ;; Buffer list
        ?\C-\M-k  ;; Browser list
        ?\C-\M-n  ;; Next workspace
        ?\C-\     ;; Ctrl+Space
        ?\C-\;))

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    (defun exwm/run-vimb ()
      (exwm/run-in-background "vimb")
      (exwm-workspace-switch-create 2))

    (defun exwm/run-qute ()
      (exwm/run-in-background "qutebrowser")
      (exwm-workspace-switch-create 2))

    (exwm/bind-function
      "s-o" 'exwm/run-qute
      "s-q" 'kill-buffer)

    (exwm/bind-command
      "s-p" "playerctl play-pause"
      "s-[" "playerctl previous"
      "s-]" "playerctl next")

    (use-package desktop-environment
      :after exwm
      :config (desktop-environment-mode)
      :custom
      (desktop-environment-brightness-small-increment "2%+")
      (desktop-environment-brightness-small-decrement "2%-")
      (desktop-environment-brightness-normal-increment "5%+")
      (desktop-environment-brightness-normal-decrement "5%-")
      (desktop-environment-screenshot-command "flameshot gui"))

    ;; This needs a more elegant ASCII banner
    (defhydra hydra-exwm-move-resize (:timeout 4)
      "Move/Resize Window (Shift is bigger steps, Ctrl moves window)"
      ("j" (lambda () (interactive) (exwm-layout-enlarge-window 10)) "V 10")
      ("J" (lambda () (interactive) (exwm-layout-enlarge-window 30)) "V 30")
      ("k" (lambda () (interactive) (exwm-layout-shrink-window 10)) "^ 10")
      ("K" (lambda () (interactive) (exwm-layout-shrink-window 30)) "^ 30")
      ("h" (lambda () (interactive) (exwm-layout-shrink-window-horizontally 10)) "< 10")
      ("H" (lambda () (interactive) (exwm-layout-shrink-window-horizontally 30)) "< 30")
      ("l" (lambda () (interactive) (exwm-layout-enlarge-window-horizontally 10)) "> 10")
      ("L" (lambda () (interactive) (exwm-layout-enlarge-window-horizontally 30)) "> 30")
      ("C-j" (lambda () (interactive) (exwm-floating-move 0 10)) "V 10")
      ("C-S-j" (lambda () (interactive) (exwm-floating-move 0 30)) "V 30")
      ("C-k" (lambda () (interactive) (exwm-floating-move 0 -10)) "^ 10")
      ("C-S-k" (lambda () (interactive) (exwm-floating-move 0 -30)) "^ 30")
      ("C-h" (lambda () (interactive) (exwm-floating-move -10 0)) "< 10")
      ("C-S-h" (lambda () (interactive) (exwm-floating-move -30 0)) "< 30")
      ("C-l" (lambda () (interactive) (exwm-floating-move 10 0)) "> 10")
      ("C-S-l" (lambda () (interactive) (exwm-floating-move 30 0)) "> 30")
      ("f" nil "finished" :exit t))

    ;; Workspace switching
    (setq exwm-input-global-keys
           `(([?\s-\C-r] . exwm-reset)
             ([?\s-w] . exwm-workspace-switch)
             ([?\s-r] . hydra-exwm-move-resize/body)
             ([?\s-e] . dired-jump)
             ([?\s-E] . (lambda () (interactive) (dired "~")))
             ([?\s-Q] . (lambda () (interactive) (kill-buffer)))
             ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))
             ,@(mapcar (lambda (i)
                         `(,(kbd (format "s-%d" i)) .
                            (lambda ()
                             (interactive)
                             (exwm-workspace-switch-create ,i))))
                        (number-sequence 0 9))))

    (exwm-input-set-key (kbd "<s-return>") 'vterm)
    (exwm-input-set-key (kbd "s-SPC") 'app-launcher-run-app)
    (exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen))

#+end_src

** Useful Links

- https://github.com/ch11ng/exwm/wiki
- https://www.reddit.com/r/emacs/comments/6huok9/exwm_configs/
- https://ambrevar.xyz/de/index.html

* Panel via Polybar

I use [[https://github.com/polybar/polybar][Polybar]] to display a panel at the top of the primary screen to display my current EXWM workspace, CPU usage and temperature, battery status, time, and system tray.  It uses some custom hooks back into Emacs via =emacsclient=.

*.config/polybar/config:*

#+begin_src conf :tangle .config/polybar/config :noweb yes

; Docs: https://github.com/polybar/polybar
;==========================================================

[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
margin-bottom = 0

[colors]
background = #f0232635
background-alt = #576075
foreground = #A6Accd
foreground-alt = #555
primary = #ffb52a
secondary = #e60053
alert = #bd2c40
underline-1 = #c792ea

[bar/panel]
width = 100%
height = <<system-settings(name="polybar/height")>>
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 2
line-color = #f00

border-size = 0
border-color = #00000000

padding-top = 5
padding-left = 1
padding-right = 1

module-margin = 1

font-0 = "Cantarell:size=<<system-settings(name="polybar/font-0-size")>>:weight=bold;2"
font-1 = "Font Awesome:size=<<system-settings(name="polybar/font-1-size")>>;2"
font-2 = "Material Icons:size=<<system-settings(name="polybar/font-2-size")>>;5"
font-3 = "Fira Mono:size=<<system-settings(name="polybar/font-3-size")>>;-3"

modules-left = exwm exwm-path
;modules-center = spotify
;modules-right = telegram mu4e cpu temperature battery date

tray-position = right
tray-padding = 2
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize

[module/exwm]
type = custom/ipc
hook-0 = emacsclient -e "(dw/polybar-exwm-workspace)" | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-underline = ${colors.underline-1}
format-background = ${colors.background-alt}
format-padding = 1

[module/exwm-path]
type = custom/ipc
hook-0 = emacsclient -e "(dw/polybar-exwm-workspace-path)" | sed -e 's/^"//' -e 's/"$//'
format-foreground = #f78c6c
initial = 1

[module/spotify]
type = custom/script
exec = ~/.config/polybar/player-status.sh
interval = 3

[module/mu4e]
type = custom/ipc
hook-0 = emacsclient -e '(dw/polybar-mail-count 500)' | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-underline = ${colors.underline-1}
click-left = emacsclient -e '(dw/go-to-inbox)'

[module/telegram]
type = custom/ipc
hook-0 = emacsclient -e '(dw/polybar-telegram-chats)' | sed -e 's/^"//' -e 's/"$//'
format-padding = 3
initial = 1

[module/xkeyboard]
type = internal/xkeyboard
blacklist-0 = num lock

format-prefix-font = 1
format-prefix-foreground = ${colors.foreground-alt}
format-prefix-underline = ${colors.underline-1}

label-layout = %layout%
label-layout-underline = ${colors.underline-1}

label-indicator-padding = 2
label-indicator-margin = 1
label-indicator-underline = ${colors.underline-1}

[module/cpu]
type = internal/cpu
interval = 2
format = <label> <ramp-coreload>
format-underline = ${colors.underline-1}
click-left = emacsclient -e "(proced)"
label = %percentage:2%%
ramp-coreload-spacing = 0
ramp-coreload-0 = ▁
ramp-coreload-0-foreground = ${colors.foreground-alt}
ramp-coreload-1 = ▂
ramp-coreload-2 = ▃
ramp-coreload-3 = ▄
ramp-coreload-4 = ▅
ramp-coreload-5 = ▆
ramp-coreload-6 = ▇

[module/memory]
type = internal/memory
interval = 2
format-prefix = "M:"
format-prefix-foreground = ${colors.foreground-alt}
format-underline = ${colors.underline-1}
label = %percentage_used%%

[module/date]
type = internal/date
interval = 5

date = "W%U: %a %b %e"
date-alt = "%A %B %d %Y"

time = %l:%M %p
time-alt = %H:%M:%S

format-prefix-foreground = ${colors.foreground-alt}
format-underline = ${colors.underline-1}

label = %date% %time%

[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 98
time-format = %-l:%M

label-charging = %percentage%% / %time%
format-charging = <animation-charging> <label-charging>
format-charging-underline = ${colors.underline-1}

label-discharging = %percentage%% / %time%
format-discharging = <ramp-capacity> <label-discharging>
format-discharging-underline = ${self.format-charging-underline}

format-full = <ramp-capacity> <label-full>
format-full-underline = ${self.format-charging-underline}

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750

[module/temperature]
type = internal/temperature
thermal-zone = 0
warn-temperature = 60

format = <label>
format-underline = ${colors.underline-1}
format-warn = <label-warn>
format-warn-underline = ${self.format-underline}

label = %temperature-c%
label-warn = %temperature-c%!
label-warn-foreground = ${colors.secondary}

#+end_src

I created a simple script to grab Spotify player information using =playerctl=:

*.config/polybar/player-status.sh:*

#+begin_src sh :tangle .config/polybar/player-status.sh :shebang #!/bin/sh

status="$(playerctl -p spotify status 2>&1)"
if [ "$status" != "No players found" ]
then
  artist="$(playerctl -p spotify metadata artist)"
  if [ "$artist" != "" ]
  then
    echo " $(playerctl -p spotify metadata artist) - $(playerctl -p spotify metadata title)"
  else
    # Clear any string that was previously displayed
    echo ""
  fi
else
  # Clear any string that was previously displayed
  echo ""
fi

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"polybar"

#+end_src

* Desktop Profile

The =desktop.scm= manifest holds the list of packages that I use to configure my desktop environment.  The package names are pulled from the relevant sections titled *Guix Packages* in this file (=Desktop.org=).

*.config/guix/manifests/desktop.scm:*

#+begin_src scheme :tangle .config/guix/manifests/desktop.scm :noweb yes

(specifications->manifest
 '(
   <<packages>>
))

#+end_src

* Applications

** Desktop Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"compton"
"redshift"
"gucharmap"
"fontmanager"
"brightnessctl"
"xdg-utils"      ;; For xdg-open, etc
"xdg-dbus-proxy" ;; For Flatpak
"gtk+:bin"       ;; For gtk-launch
"glib:bin"       ;; For gio-launch-desktop
"shared-mime-info"

#+end_src

* User Services

I use [[https://www.gnu.org/software/shepherd/][GNU Shepherd]] to manage services that run in the background when I log in.

#+begin_src scheme :tangle .config/shepherd/init.scm

(define gpg-agent
  (make <service>
    #:provides '(gpg-agent)
    #:respawn? #t
    #:start (make-system-constructor "gpg-connect-agent /bye")
    #:stop (make-system-destructor "gpgconf --kill gpg-agent")))

(define mcron
  (make <service>
    #:provides '(mcron)
    #:respawn? #t
    #:start (make-forkexec-constructor '("mcron"))
    #:stop  (make-kill-destructor)))

(define pulseaudio
  (make <service>
    #:provides '(pulseaudio)
    #:respawn? #t
    #:start (make-forkexec-constructor '("pulseaudio"))
    #:stop  (make-kill-destructor)))

(register-services gpg-agent mcron syncthing pulseaudio)
(action 'shepherd 'daemonize)

;; Start user services
(for-each start '(gpg-agent mcron syncthing pulseaudio))

#+end_src

* User Services

I use [[https://www.gnu.org/software/shepherd/][GNU Shepherd]] to manage services that run in the background when I log in.

#+begin_src scheme :tangle .config/shepherd/init.scm

(define gpg-agent
  (make <service>
    #:provides '(gpg-agent)
    #:respawn? #t
    #:start (make-system-constructor "gpg-connect-agent /bye")
    #:stop (make-system-destructor "gpgconf --kill gpg-agent")))

(define mcron
  (make <service>
    #:provides '(mcron)
    #:respawn? #t
    #:start (make-forkexec-constructor '("mcron"))
    #:stop  (make-kill-destructor)))

(define pulseaudio
  (make <service>
    #:provides '(pulseaudio)
    #:respawn? #t
    #:start (make-forkexec-constructor '("pulseaudio"))
    #:stop  (make-kill-destructor)))

(register-services gpg-agent mcron pulseaudio)
(action 'shepherd 'daemonize)

;; Start user services
(for-each start '(gpg-agent mcron pulseaudio))

#+end_src

* Provide the dw-desktop package

#+begin_src emacs-lisp :tangle .emacs.d/lisp/dw-desktop.el

  (provide 'dw-desktop)

#+end_src
